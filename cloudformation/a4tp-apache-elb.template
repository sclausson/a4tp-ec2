{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create a load balanced sample web site. The AMI is chosen based on the region in which the stack is run. This example creates a load balancer, an autoscaling group and a launch configuration. The instances may be created in one or more AZs. The Website URL is available as a stack output. **WARNING** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "Type of EC2 instance to launch",
      "Type" : "String",
      "Default" : "t2.small"
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    }, 
    "DesiredCapacity" : {
      "Description" : "Number of instances to deploy",
      "Type" : "Number",
      "Default" : "1"
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
      "us-east-1" : { "ami" : "ami-1ecae776" }
    }
  },

  "Resources" : {
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Scheme" : "internet-facing",
        "SecurityGroups" : [{ "Ref" : "ElbSecurityGroup" }, "sg-86bac8e2"],
        "Subnets" : [
          "subnet-637bcb48","subnet-45c34b1c","subnet-7d6a000a","subnet-aca9f196"
        ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/index.html",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "AutoScalingGroup": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier": [
          "subnet-637bcb48","subnet-45c34b1c","subnet-7d6a000a","subnet-aca9f196"
        ],
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "MinSize" : { "Ref" : "DesiredCapacity" },
        "MaxSize" : { "Ref" : "DesiredCapacity" },
        "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
        "Tags": [
          { "Key": "Role", "Value" : "WebServer", "PropagateAtLaunch" : "true" }
        ],
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      }
    },
    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration", 
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/etc/chef/shaynetest-validator.pem": {
                "source": "https://s3.amazonaws.com/ShayneResources/shaynetest-validator.pem",
                "authentication": "S3AccessCreds"
              },
              "/etc/chef/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                        "log_level                :info\n",
                        "log_location             '/opt/chef/chef-client.log'\n",
                        "validation_client_name   'shaynetest-validator'\n",
                        "validation_key           '/etc/chef/shaynetest-validator.pem'\n",
                        "chef_server_url          'https://api.opscode.com/organizations/shaynetest'\n",
                        "cache_type               'BasicFile'\n",
                        "cache_options( :path =>  '/opt/chef/.chef/checksums' )\n",
                        "cookbook_path            ['/opt/chef/cookbooks']\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_chef_run" : {
                "command" : "/opt/chef/bin/chef-client -o recipe[a4tp]",
                "ignoreErrors" : "false"
              },
              "99_all_clear_signal" : {
                "command" : {
                  "Fn::Join" : [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0 -r \"a4tp Website Setup Complete\" '",
                      {
                        "Ref" : "CompletionWaitHandle"
                      },
                      "'"
                    ]    
                  ]
                },
                "ignoreErrors" : "false"
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type" : "s3",
            "buckets" : [ "ShayneResources" ],
            "roleName" : { "Ref" : "IamRole" }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile" : { "Ref" : "IamInstanceProfile" },
        "ImageId" : {
          "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "ami" ]
        },
        "SecurityGroups" : [{ "Ref" : "InstanceSecurityGroup" }, "sg-86bac8e2"],
        "KeyName" : { "Ref" : "KeyName" } ,
        "UserData" : { 
          "Fn::Base64" : {
            "Fn::Join" : [
              "",
              [
              "#!/bin/bash\n",
              "#update iptables\n",
              "iptables -A INPUT -p tcp -m tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\n",
              "# Grab latest Cloudformation tools from Amazon\n",
              "# easy_install lockfile==0.9.1\n",
              "# easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
              "#update packages\n",
              "yum -y update\n",
              "#install chef client\n",
              "wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-12.0.3-1.x86_64.rpm\n",
              "rpm -ivh chef-12.0.3-1.x86_64.rpm\n",
              "#Error reporting helper function\n",
              "function error_exit\n",
              "{\n",
              " /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "CompletionWaitHandle" }, "'\n",
              " exit 1\n",
              "}\n", 
              "#Inititalize cfn-init run\n",
              "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfiguration", " --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(/tmp/cfn-init.log)\n"
              ]
            ]

          }
        }
      }
    },
    "ElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable ALL inbound HTTP",
        "VpcId" : "vpc-4696cf23",
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }]
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "VpcId" : "vpc-4696cf23",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "80.216.67.77/32"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" :  "80",
          "ToPort" : "80",
          "CidrIp" : "80.216.67.77/32"
        } ]
      }
    },
    "IamRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/"
      }
    },
    "IamPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "WebServerPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            { "Effect" : "Allow", "Action" : "*", "Resource" : "*" }
          ]
        },
        "Roles" : [ { "Ref" : "IamRole"} ] 
      }
    },
    "IamInstanceProfile": {
	    "Type": "AWS::IAM::InstanceProfile",
	    "Properties": {
		    "Path": "/",
		    "Roles": [ {
		      "Ref": "IamRole"
		    } ]
	    }
	  },
    "CompletionWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
    "CompletionWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "LaunchConfiguration",
      "Properties": {
          "Handle": {
              "Ref": "CompletionWaitHandle"
          },
          "Timeout": "1800"
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Description" : "URL of the sample website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}